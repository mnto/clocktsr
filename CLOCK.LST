Microsoft (R) Macro Assembler Version 6.11		    10/30/16 16:37:10
clock.asm						     Page 1 - 1


				TITLE	clock.asm

				; Author: Minh To
				; Last update: October 30, 2016
				; This program demonstrates a clock program. It displays
				; the clock in the upper right corner of the screen when the clock is toggled
				; by the user's pressing 2 shift keys

				include irvine16.inc
			      C ; Irvine16.inc - Include file for programs using
			      C ; the Irvine16.lib (Real-address mode library).
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 0000				.code

 0000 30 31 32 33 34 35		hex byte "0123456789abcdef"	; array of hex values
       36 37 38 39 61 62
       63 64 65 66
 0010 00			rt BYTE 0			; boolean value to keep track of right shift
 0011 00			lft BYTE 0			; boolean value to keep track of left shift
 0012 00			other BYTE 0			; boolean value to keep track of other keys
 0013 00			showit BYTE 0			; boolean value to show the clock
 0014 00000000			orig_09 dword ?			; original 08 value
 0018 00000000			orig_08 dword ?			; original 09 value
 001C 0000			count word ?			; timer counter to count seconds
 001E 00			am BYTE 0			; boolean value for am/pm

 001F				GetTime PROC
				    ; OUT: CH = hour, CL = minute, DH = second
 001F  50			    push ax
 0020  B4 02			    mov ah, 2
 0022  CD 1A			    int 1Ah
 0024  58			    pop ax
 0025  C3			    ret
 0026				GetTime ENDP

 0026				Out8 PROC
				    ; IN: value to be printed out in AL
				    ; output a byte at a time

 0026  55			    push bp
 0027  8B EC			    mov bp, sp

 0029  50			    push ax
 002A  53			    push bx
 002B  51			    push cx
 002C  52			    push dx

 002D  8B 56 04			    mov dx, [bp + 4]
 0030  B9 0008			    mov cx, 8
 0033  D3 C2			    rol dx, cl			; only look at 8 bits
 0035  B9 0002			    mov cx, 2			; only output 2 nybbles
 0038  B4 0E			    mov ah, 0Eh     		; bios output routine
 003A  51			L1: push    cx
 003B  B9 0004			    mov cx, 4
 003E  D3 C2			    rol dx, cl			; look at each nybble
 0040  59			    pop cx
 0041  8B DA			    mov bx, dx
 0043  83 E3 0F			    and bx, 000Fh
 0046  2E: 8A 87 0000 R		    mov al, hex[bx]		; print out its hex value
 004B  CD 10			    int 10h
 004D  E2 EB			    loop    L1

 004F  5A			    pop dx
 0050  59			    pop cx
 0051  5B			    pop bx
 0052  58			    pop ax

 0053  8B E5			    mov sp, bp
 0055  5D			    pop bp
 0056  C2 0002			    ret 2
 0059				Out8 ENDP

 0059				JumpCursor PROC
				    ; IN: DH row, DL column
				    ; Move the cursor on page 0.
 0059  50			    push ax
 005A  53			    push bx
 005B  B7 00			    mov bh, 0
 005D  B8 0200			    mov ax, 0200h
 0060  CD 10			    int 10h
 0062  5B			    pop bx
 0063  58			    pop ax
 0064  C3			    ret
 0065				JumpCursor ENDP

 0065				colon PROC
				    ; Print out a cursor
 0065  50			    push ax
 0066  B4 0E			    mov ah, 0Eh
 0068  B0 3A			    mov al, ':'
 006A  CD 10			    int 10h
 006C  58			    pop ax
 006D  C3			    ret
 006E				colon ENDP

 006E				printAM PROC
 006E  50			    push ax
 006F  B4 0E			    mov ah, 0Eh
 0071  B0 41			    mov al, 'A'
 0073  CD 10			    int 10h
 0075  B0 4D			    mov al, 'M'
 0077  CD 10			    int 10h
 0079  58			    pop ax
 007A  C3			    ret
 007B				printAM ENDP

 007B				printPM PROC
 007B  50			    push ax
 007C  B4 0E			    mov ah, 0Eh
 007E  B0 50			    mov al, 'P'
 0080  CD 10			    int 10h
 0082  B0 4D			    mov al, 'M'
 0084  CD 10			    int 10h
 0086  58			    pop ax
 0087  C3			    ret
 0088				printPM ENDP

 0088				handle08 PROC
				    ; Handle 08 interrupt: the 2 shift keys should toggle the clock
				    ; on and off
 0088  50			    push ax
 0089  53			    push bx
 008A  51			    push cx
 008B  52			    push dx

 008C  B7 00			    mov bh, 0
 008E  B8 0300			    mov ax, 0300h       	; get cursor position
 0091  CD 10			    int 10h
 0093  52			    push dx         		; remember it

 0094  2E: 80 3E 0013 R		    cmp showit, 0		; if (showit == 0)
       00
 009A  74 5A			    je noShow			;   clear the clock

 009C  B6 00			    mov dh, 0			; otherwise jump to upper right corner
 009E  B2 46			    mov dl, 70			; to print clock
 00A0  E8 FFB6			    call JumpCursor

 00A3  E8 FF79			    call GetTime		; get system time

 00A6  80 FD 12			    cmp ch, 12h			; change from 24-hour format to 12-hour format
 00A9  76 1F			    jbe outputTime		; (am = 0 indicates the morning,
 00AB  80 ED 12			    sub ch, 12h			;  am = 1 indicates the afternoon)
 00AE  2E: C6 06 001E R		    mov am, 1
       01

 00B4  2E: 83 06 001C R		    add count, 55		; update and only print out the clock
       37
 00BA  2E: 81 3E 001C R		    cmp count, 1000		; every second
       03E8
 00C1  7E 45			    jle CursorBack
 00C3  2E: 81 2E 001C R		    sub count, 1000
       03E8

				    ; OUTPUT THE CLOCK IN THIS FORMAT: HH:MM:SS(AM/PM)
 00CA				outputTime:
 00CA  B4 00			    mov ah, 0
 00CC  8A C5			    mov al, ch
 00CE  50			    push ax
 00CF  E8 FF54			    call Out8			; output the hour

 00D2  E8 FF90			    call colon			; output colon

 00D5  8A C1			    mov al, cl
 00D7  50			    push ax
 00D8  E8 FF4B			    call Out8			; output the minute

 00DB  E8 FF87			    call colon			; output colon

 00DE  8A C6			    mov al, dh
 00E0  50			    push ax
 00E1  E8 FF42			    call Out8			; out the second

 00E4  2E: 80 3E 001E R		    cmp am, 0			; if (am == 0)
       00
 00EA  74 05			    je morning			;   it is morning, print AM after the time
 00EC  E8 FF8C			    call printPM		; else
 00EF  EB 17			    jmp CursorBack		;   it is afternoon, print PM after the time

 00F1				morning:
 00F1  E8 FF7A			    call printAM
 00F4  EB 12			    jmp CursorBack		; jump cursor back to its original position

 00F6				noShow:				; if clock is toggled off
 00F6  B6 00			    mov dh, 0
 00F8  B2 46			    mov dl, 70			; wipe out the clock off of screen
 00FA  E8 FF5C			    call JumpCursor
 00FD  B9 000A			    mov cx, 10
 0100  B4 0E			    mov ah, 0Eh
 0102				space:
 0102  B0 20			    mov al, ' '
 0104  CD 10			    int 10h
 0106  E2 FA			    loop space

 0108				CursorBack:			; put cursor back to its original position
 0108  5A			    pop dx
 0109  E8 FF4D			    call JumpCursor

 010C				done:
 010C  5A			    pop dx
 010D  59			    pop cx
 010E  5B			    pop bx
 010F  58			    pop ax

 0110  9C			    pushf
 0111  2E: FF 1E 0018 R		    call orig_08		; handle timer interrupt

 0116  CF			    iret
 0117				handle08 ENDP

 0117				handle09 PROC
				    ; Handle the keyboard interrupt so that when 2 shift keys are pressed
				    ; it changes the boolean value to show or clear the clock
 0117  50			    push ax

 0118  E4 60			    in al, 60h  		; read the current key

 011A  3C 36			    cmp al, 36h			; if right shift is pressed
 011C  75 07			    jnz leftDown
 011E  2E: F6 16 0010 R		    not rt			; set right shift variable
 0123  EB 52			    jmp done

 0125				leftDown:
 0125  3C 2A			    cmp al, 2Ah			; if left shift is pressed
 0127  75 07			    jnz rightUp
 0129  2E: F6 16 0011 R		    not lft			; set left shift variable
 012E  EB 47			    jmp done

 0130				rightUp:
 0130  3C B6			    cmp al, 0B6h		; if right shift was released
 0132  75 08			    jnz leftUp
 0134  2E: C6 06 0010 R		    mov rt, 1			; clear right variable
       01
 013A  EB 1A			    jmp continue

 013C				leftUp:
 013C  3C AA			    cmp al, 0AAh		; if left shift was released
 013E  75 08			    jnz otherKeys
 0140  2E: C6 06 0011 R		    mov lft, 1			; clear left variable
       01
 0146  EB 0E			    jmp continue

 0148				otherKeys:
 0148  2E: C6 06 0010 R		    mov rt, 0			; if another key not left shift or right shift
       00
 014E  2E: C6 06 0011 R		    mov lft, 0			; was pressed, reset boolean values for both
       00
 0154  74 21			    jz done			; keys and exit

 0156				continue:
 0156  2E: 80 3E 0010 R		    cmp rt, 1			; if both right shift
       01
 015C  75 19			    jnz done
 015E  2E: 80 3E 0011 R		    cmp lft, 1			; and left shift were pressed
       01
 0164  75 11			    jnz done
 0166  2E: F6 16 0013 R		    not showit			; toggle the clock
 016B  2E: C6 06 0010 R		    mov rt, 0			; reset boolean values after clock is toggled
       00
 0171  2E: C6 06 0011 R		    mov lft, 0
       00

 0177				done:
 0177  58			    pop ax

 0178  9C			    pushf
 0179  2E: FF 1E 0014 R		    call orig_09    		; handle the keyboard interrupt!

 017E  CF			    iret 		        ; return to the point that was interrupted
 017F				handle09 ENDP

 017F				install09 PROC
 017F  1E			    push ds
 0180  06			    push es
 0181  50			    push ax
 0182  53			    push bx
 0183  52			    push dx

				    ; before changing the vector, 
				    ; get the old vector and save it!
 0184  B8 3509			    mov ax, 3509h
 0187  CD 21			    int 21h
 0189  2E: 89 1E 0014 R		    mov word ptr orig_09, bx
 018E  2E: 8C 06 0016 R		    mov word ptr orig_09+2, es

				    ; Now install the new 09 vector
 0193  0E			    push cs 	        	; put our code segment
 0194  1F			    pop ds      	        ; into ds
 0195  BA 0117 R		    mov dx, offset handle09     ; with offset in dx
 0198  B8 2509			    mov ax, 2509h
 019B  CD 21			    int 21h

 019D  5A			    pop dx
 019E  5B			    pop bx
 019F  58			    pop ax
 01A0  07			    pop es
 01A1  1F			    pop ds
 01A2  C3			    ret
 01A3				install09 ENDP

 01A3				install08 PROC
 01A3  1E			    push ds
 01A4  06			    push es
 01A5  50			    push ax
 01A6  53			    push bx
 01A7  52			    push dx

				    ; before changing the vector, 
				    ; get the old vector and save it!
 01A8  B8 3508			    mov ax, 3508h
 01AB  CD 21			    int 21h
 01AD  2E: 89 1E 0018 R		    mov word ptr orig_08, bx
 01B2  2E: 8C 06 001A R		    mov word ptr orig_08+2, es

				    ; Now install the new 08 vector
 01B7  0E			    push cs      	        ; put our code segment
 01B8  1F			    pop ds              	; into ds
 01B9  BA 0088 R		    mov dx, offset handle08     ; with offset in dx
 01BC  B8 2508			    mov ax, 2508h
 01BF  CD 21			    int 21h

 01C1  5A			    pop dx
 01C2  5B			    pop bx
 01C3  58			    pop ax
 01C4  07			    pop es
 01C5  1F			    pop ds
 01C6  C3			    ret
 01C7				install08 ENDP

 01C7				uninstall08 PROC
				    ;; restore the original int 09h vector
 01C7  1E			    push ds
 01C8  50			    push ax
 01C9  52			    push dx

 01CA  2E: 8B 16 0018 R		    mov dx, word ptr orig_08
 01CF  2E: 8E 1E 001A R		    mov ds, word ptr orig_08 + 2
 01D4  B8 2508			    mov ax, 2508h
 01D7  CD 21			    int 21h

 01D9  5A			    pop dx
 01DA  58			    pop ax
 01DB  1F			    pop ds
 01DC  C3			    ret
 01DD				uninstall08 ENDP

 01DD				uninstall09 PROC
				    ;; restore the original int 09h vector
 01DD  1E			    push ds
 01DE  50			    push ax
 01DF  52			    push dx

 01E0  2E: 8B 16 0014 R		    mov dx, word ptr orig_09
 01E5  2E: 8E 1E 0016 R		    mov ds, word ptr orig_09 + 2
 01EA  B8 2509			    mov ax, 2509h
 01ED  CD 21			    int 21h

 01EF  5A			    pop dx
 01F0  58			    pop ax
 01F1  1F			    pop ds
 01F2  C3			    ret
 01F3				uninstall09 ENDP

 01F3				main PROC
 0000				.data
 0000  00FF [			inputstr BYTE 255 DUP(0)
        00
       ]

 01F3				.code

 01F3  B8 ---- R		    mov ax, @data
 01F6  8E D8			    mov ds, ax

 01F8  BA 0000 R		    mov dx, offset inputstr
 01FB  8B DA			    mov bx, dx
 01FD  B9 00FF			    mov cx, lengthof inputstr

				    ;; install handle08 and handle 09
				    ;; as the new interrupt vector for int 08h and int 09h
 0200  E8 FF7C			    call install09
 0203  E8 FF9D			    call install08

 0206				top:	                    	; read strings and echo them until 
 0206  E8 0000 E		    call readstring         	; user enters an empty string
 0209  E8 0000 E		    call crlf
 020C  80 3F 00			    cmp byte ptr [bx], 0
 020F  74 08			    je done
 0211  E8 0000 E		    call WriteString
 0214  E8 0000 E		    call crlf
 0217  EB ED			    jmp top
 0219				done:
				    ; uninstall handle08 and handle09
 0219  E8 FFC1			    call uninstall09
 021C  E8 FFA8			    call uninstall08
 021F  B8 4C00			    mov ax, 4c00h
 0222  CD 21			    int 21h

 0224				main ENDP
				END main



Microsoft (R) Macro Assembler Version 6.11		    10/30/16 16:37:10
clock.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CursorPosStruc . . . . . . . . .	 0002
  Ycoord . . . . . . . . . . . .	 0000	     Byte
  Xcoord . . . . . . . . . . . .	 0001	     Byte
ExtGetDskFreSpcStruc . . . . . .	 002C
  StructSize . . . . . . . . . .	 0000	     Word
  Level  . . . . . . . . . . . .	 0002	     Word
  SectorsPerCluster  . . . . . .	 0004	     DWord
  BytesPerSector . . . . . . . .	 0008	     DWord
  AvailableClusters  . . . . . .	 000C	     DWord
  TotalClusters  . . . . . . . .	 0010	     DWord
  AvailablePhysSectors . . . . .	 0014	     DWord
  TotalPhysSectors . . . . . . .	 0018	     DWord
  AvailableAllocationUnits . . .	 001C	     DWord
  TotalAllocationUnits . . . . .	 0020	     DWord
  Rsvd . . . . . . . . . . . . .	 0024	     DWord
FPU_ENVIRON  . . . . . . . . . .	 001C
  controlWord  . . . . . . . . .	 0000	     Word
  statusWord . . . . . . . . . .	 0004	     Word
  tagWord  . . . . . . . . . . .	 0008	     Word
  instrPtrLow  . . . . . . . . .	 000C	     Word
  opcodeAndInstrPtrHi  . . . . .	 0010	     DWord
  operandPtrLow  . . . . . . . .	 0014	     Word
  operandPtrHi . . . . . . . . .	 0018	     DWord
TimeRecord . . . . . . . . . . .	 0004
  hours  . . . . . . . . . . . .	 0000	     Byte
  minutes  . . . . . . . . . . .	 0001	     Byte
  seconds  . . . . . . . . . . .	 0002	     Byte
  hhss . . . . . . . . . . . . .	 0003	     Byte
VideoInfoStruc . . . . . . . . .	 0041
  supportedInfoPtr . . . . . . .	 0000	     DWord
  videoMode  . . . . . . . . . .	 0004	     Byte
  numCharColumns . . . . . . . .	 0005	     Word
  videoBufferLen . . . . . . . .	 0007	     Word
  videoBufferStartPtr  . . . . .	 0009	     Word
  cursors  . . . . . . . . . . .	 000B	     Word
  cursorStartLine  . . . . . . .	 001B	     Byte
  cursorEndLine  . . . . . . . .	 001C	     Byte
  activeDisplayPage  . . . . . .	 001D	     Byte
  adapterBasePortAddr  . . . . .	 001E	     Word
  currentRegister3B8or3D8  . . .	 0020	     Byte
  currentRegister3B9or3D9  . . .	 0021	     Byte
  numCharRows  . . . . . . . . .	 0022	     Byte
  characterScanHeight  . . . . .	 0023	     Word
  activeDisplayCode  . . . . . .	 0025	     Byte
  inactiveDisplayCode  . . . . .	 0026	     Byte
  numberOfColors . . . . . . . .	 0027	     Word
  numberOfVideoPages . . . . . .	 0029	     Byte
  numberOfScanLines  . . . . . .	 002A	     Word
  primaryCharBlock . . . . . . .	 002C	     Byte
  secondaryCharBlock . . . . . .	 002D	     Byte
  miscStateInfo  . . . . . . . .	 002E	     Byte
  videoMemAvail  . . . . . . . .	 0032	     Byte
  savePointerStateInfo . . . . .	 0033	     Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 00FF	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0224	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

Clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetTime  . . . . . . . . . . . .	P Near	 001F	  _TEXT	Length= 0007 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
JumpCursor . . . . . . . . . . .	P Near	 0059	  _TEXT	Length= 000C Public STDCALL
Out8 . . . . . . . . . . . . . .	P Near	 0026	  _TEXT	Length= 0033 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 003A	  _TEXT	
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
colon  . . . . . . . . . . . . .	P Near	 0065	  _TEXT	Length= 0009 Public STDCALL
handle08 . . . . . . . . . . . .	P Near	 0088	  _TEXT	Length= 008F Public STDCALL
  outputTime . . . . . . . . . .	L Near	 00CA	  _TEXT	
  morning  . . . . . . . . . . .	L Near	 00F1	  _TEXT	
  noShow . . . . . . . . . . . .	L Near	 00F6	  _TEXT	
  space  . . . . . . . . . . . .	L Near	 0102	  _TEXT	
  CursorBack . . . . . . . . . .	L Near	 0108	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 010C	  _TEXT	
handle09 . . . . . . . . . . . .	P Near	 0117	  _TEXT	Length= 0090 Public STDCALL
  leftDown . . . . . . . . . . .	L Near	 0125	  _TEXT	
  rightUp  . . . . . . . . . . .	L Near	 0130	  _TEXT	
  leftUp . . . . . . . . . . . .	L Near	 013C	  _TEXT	
  otherKeys  . . . . . . . . . .	L Near	 0148	  _TEXT	
  continue . . . . . . . . . . .	L Near	 0156	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0177	  _TEXT	
install08  . . . . . . . . . . .	P Near	 01A3	  _TEXT	Length= 0024 Public STDCALL
install09  . . . . . . . . . . .	P Near	 017F	  _TEXT	Length= 0024 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 01F3	  _TEXT	Length= 0031 Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 0206	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0219	  _TEXT	
printAM  . . . . . . . . . . . .	P Near	 006E	  _TEXT	Length= 000D Public STDCALL
printPM  . . . . . . . . . . . .	P Near	 007B	  _TEXT	Length= 000D Public STDCALL
uninstall08  . . . . . . . . . .	P Near	 01C7	  _TEXT	Length= 0016 Public STDCALL
uninstall09  . . . . . . . . . .	P Near	 01DD	  _TEXT	Length= 0016 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@cmdline . . . . . . . . . . . .	Text   	 OFFSET __98765765cmdline
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
ACTION_CREATED_OPENED  . . . . .	Number	 0002h	 
ACTION_OPENED  . . . . . . . . .	Number	 0001h	 
ACTION_REPLACED_OPENED . . . . .	Number	 0003h	 
FILE_CREATE  . . . . . . . . . .	Number	 0010h	 
FILE_OPEN  . . . . . . . . . . .	Number	 0001h	 
FILE_TRUNCATE  . . . . . . . . .	Number	 0002h	 
LIGHT_BLUE . . . . . . . . . . .	Number	 0009h	 
LIGHT_CYAN . . . . . . . . . . .	Number	 000Bh	 
LIGHT_GRAY . . . . . . . . . . .	Number	 0007h	 
LIGHT_GREEN  . . . . . . . . . .	Number	 000Ah	 
LIGHT_MAGENTA  . . . . . . . . .	Number	 000Dh	 
LIGHT_RED  . . . . . . . . . . .	Number	 000Ch	 
OPEN_ACCESS_READONLY . . . . . .	Number	 0000h	 
OPEN_ACCESS_READWRITE  . . . . .	Number	 0002h	 
OPEN_ACCESS_RO_NOMODLASTACCESS .	Number	 0004h	 
OPEN_ACCESS_WRITEONLY  . . . . .	Number	 0001h	 
OPEN_FLAGS_ALIAS_HINT  . . . . .	Number	 0400h	 
OPEN_FLAGS_COMMIT  . . . . . . .	Number	 4000h	 
OPEN_FLAGS_NOCRITERR . . . . . .	Number	 2000h	 
OPEN_FLAGS_NOINHERIT . . . . . .	Number	 0080h	 
OPEN_FLAGS_NO_BUFFERING  . . . .	Number	 0100h	 
OPEN_FLAGS_NO_COMPRESS . . . . .	Number	 0200h	 
OPEN_SHARE_COMPATIBLE  . . . . .	Number	 0000h	 
OPEN_SHARE_DENYNONE  . . . . . .	Number	 0040h	 
OPEN_SHARE_DENYREADWRITE . . . .	Number	 0010h	 
OPEN_SHARE_DENYREAD  . . . . . .	Number	 0030h	 
OPEN_SHARE_DENYWRITE . . . . . .	Number	 0020h	 
_A_ARCH  . . . . . . . . . . . .	Number	 0020h	 
_A_HIDDEN  . . . . . . . . . . .	Number	 0002h	 
_A_NORMAL  . . . . . . . . . . .	Number	 0000h	 
_A_RDONLY  . . . . . . . . . . .	Number	 0001h	 
_A_SYSTEM  . . . . . . . . . . .	Number	 0004h	 
_A_VOLID . . . . . . . . . . . .	Number	 0008h	 
am . . . . . . . . . . . . . . .	Byte	 001E	  _TEXT	
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0001h	 
brown  . . . . . . . . . . . . .	Number	 0006h	 
count  . . . . . . . . . . . . .	Word	 001C	  _TEXT	
cyan . . . . . . . . . . . . . .	Number	 0003h	 
exit . . . . . . . . . . . . . .	Text   	 .EXIT
gray . . . . . . . . . . . . . .	Number	 0008h	 
green  . . . . . . . . . . . . .	Number	 0002h	 
hex  . . . . . . . . . . . . . .	Byte	 0000	  _TEXT	
inputstr . . . . . . . . . . . .	Byte	 0000	  _DATA	
lft  . . . . . . . . . . . . . .	Byte	 0011	  _TEXT	
lightBlue  . . . . . . . . . . .	Number	 0009h	 
lightCyan  . . . . . . . . . . .	Number	 000Bh	 
lightGray  . . . . . . . . . . .	Number	 0007h	 
lightGreen . . . . . . . . . . .	Number	 000Ah	 
lightMagenta . . . . . . . . . .	Number	 000Dh	 
lightRed . . . . . . . . . . . .	Number	 000Ch	 
magenta  . . . . . . . . . . . .	Number	 0005h	 
orig_08  . . . . . . . . . . . .	DWord	 0018	  _TEXT	
orig_09  . . . . . . . . . . . .	DWord	 0014	  _TEXT	
other  . . . . . . . . . . . . .	Byte	 0012	  _TEXT	
red  . . . . . . . . . . . . . .	Number	 0004h	 
rt . . . . . . . . . . . . . . .	Byte	 0010	  _TEXT	
showit . . . . . . . . . . . . .	Byte	 0013	  _TEXT	
white  . . . . . . . . . . . . .	Number	 000Fh	 
yellow . . . . . . . . . . . . .	Number	 000Eh	 

	   0 Warnings
	   0 Errors
